#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.34011
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataModul
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="aspnet-Softbucks-20140302121355")]
	public partial class DataClassesSoftbucksDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertAspNetUsers(AspNetUsers instance);
    partial void UpdateAspNetUsers(AspNetUsers instance);
    partial void DeleteAspNetUsers(AspNetUsers instance);
    partial void InsertUnitsProducts(UnitsProducts instance);
    partial void UpdateUnitsProducts(UnitsProducts instance);
    partial void DeleteUnitsProducts(UnitsProducts instance);
    partial void InsertMerchandiseStates(MerchandiseStates instance);
    partial void UpdateMerchandiseStates(MerchandiseStates instance);
    partial void DeleteMerchandiseStates(MerchandiseStates instance);
    partial void InsertOrdersStates(OrdersStates instance);
    partial void UpdateOrdersStates(OrdersStates instance);
    partial void DeleteOrdersStates(OrdersStates instance);
    partial void InsertProducts(Products instance);
    partial void UpdateProducts(Products instance);
    partial void DeleteProducts(Products instance);
    partial void InsertProductStates(ProductStates instance);
    partial void UpdateProductStates(ProductStates instance);
    partial void DeleteProductStates(ProductStates instance);
    partial void InsertRatings(Ratings instance);
    partial void UpdateRatings(Ratings instance);
    partial void DeleteRatings(Ratings instance);
    partial void InsertRatingStates(RatingStates instance);
    partial void UpdateRatingStates(RatingStates instance);
    partial void DeleteRatingStates(RatingStates instance);
    partial void InsertStates(States instance);
    partial void UpdateStates(States instance);
    partial void DeleteStates(States instance);
    partial void InsertTypeProducts(TypeProducts instance);
    partial void UpdateTypeProducts(TypeProducts instance);
    partial void DeleteTypeProducts(TypeProducts instance);
    partial void InsertMerchandiseProducts(MerchandiseProducts instance);
    partial void UpdateMerchandiseProducts(MerchandiseProducts instance);
    partial void DeleteMerchandiseProducts(MerchandiseProducts instance);
    partial void InsertMerchandises(Merchandises instance);
    partial void UpdateMerchandises(Merchandises instance);
    partial void DeleteMerchandises(Merchandises instance);
    partial void InsertOrders(Orders instance);
    partial void UpdateOrders(Orders instance);
    partial void DeleteOrders(Orders instance);
    #endregion
		
		public DataClassesSoftbucksDataContext() : 
				base(global::DataModul.Properties.Settings.Default.aspnet_Softbucks_20140302121355ConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesSoftbucksDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesSoftbucksDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesSoftbucksDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesSoftbucksDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AspNetUsers> AspNetUsers
		{
			get
			{
				return this.GetTable<AspNetUsers>();
			}
		}
		
		public System.Data.Linq.Table<UnitsProducts> UnitsProducts
		{
			get
			{
				return this.GetTable<UnitsProducts>();
			}
		}
		
		public System.Data.Linq.Table<MerchandiseStates> MerchandiseStates
		{
			get
			{
				return this.GetTable<MerchandiseStates>();
			}
		}
		
		public System.Data.Linq.Table<OrdersStates> OrdersStates
		{
			get
			{
				return this.GetTable<OrdersStates>();
			}
		}
		
		public System.Data.Linq.Table<Products> Products
		{
			get
			{
				return this.GetTable<Products>();
			}
		}
		
		public System.Data.Linq.Table<ProductStates> ProductStates
		{
			get
			{
				return this.GetTable<ProductStates>();
			}
		}
		
		public System.Data.Linq.Table<Ratings> Ratings
		{
			get
			{
				return this.GetTable<Ratings>();
			}
		}
		
		public System.Data.Linq.Table<RatingStates> RatingStates
		{
			get
			{
				return this.GetTable<RatingStates>();
			}
		}
		
		public System.Data.Linq.Table<States> States
		{
			get
			{
				return this.GetTable<States>();
			}
		}
		
		public System.Data.Linq.Table<TypeProducts> TypeProducts
		{
			get
			{
				return this.GetTable<TypeProducts>();
			}
		}
		
		public System.Data.Linq.Table<MerchandiseProducts> MerchandiseProducts
		{
			get
			{
				return this.GetTable<MerchandiseProducts>();
			}
		}
		
		public System.Data.Linq.Table<Merchandises> Merchandises
		{
			get
			{
				return this.GetTable<Merchandises>();
			}
		}
		
		public System.Data.Linq.Table<Orders> Orders
		{
			get
			{
				return this.GetTable<Orders>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUsers")]
	public partial class AspNetUsers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _UserName;
		
		private string _PasswordHash;
		
		private string _SecurityStamp;
		
		private string _Discriminator;
		
		private EntitySet<Ratings> _Ratings;
		
		private EntitySet<Merchandises> _Merchandises;
		
		private EntitySet<Orders> _Orders;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnSecurityStampChanging(string value);
    partial void OnSecurityStampChanged();
    partial void OnDiscriminatorChanging(string value);
    partial void OnDiscriminatorChanged();
    #endregion
		
		public AspNetUsers()
		{
			this._Ratings = new EntitySet<Ratings>(new Action<Ratings>(this.attach_Ratings), new Action<Ratings>(this.detach_Ratings));
			this._Merchandises = new EntitySet<Merchandises>(new Action<Merchandises>(this.attach_Merchandises), new Action<Merchandises>(this.detach_Merchandises));
			this._Orders = new EntitySet<Orders>(new Action<Orders>(this.attach_Orders), new Action<Orders>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(MAX)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="NVarChar(MAX)")]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityStamp", DbType="NVarChar(MAX)")]
		public string SecurityStamp
		{
			get
			{
				return this._SecurityStamp;
			}
			set
			{
				if ((this._SecurityStamp != value))
				{
					this.OnSecurityStampChanging(value);
					this.SendPropertyChanging();
					this._SecurityStamp = value;
					this.SendPropertyChanged("SecurityStamp");
					this.OnSecurityStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discriminator", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Discriminator
		{
			get
			{
				return this._Discriminator;
			}
			set
			{
				if ((this._Discriminator != value))
				{
					this.OnDiscriminatorChanging(value);
					this.SendPropertyChanging();
					this._Discriminator = value;
					this.SendPropertyChanged("Discriminator");
					this.OnDiscriminatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUsers_Ratings", Storage="_Ratings", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<Ratings> Ratings
		{
			get
			{
				return this._Ratings;
			}
			set
			{
				this._Ratings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUsers_Merchandises", Storage="_Merchandises", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<Merchandises> Merchandises
		{
			get
			{
				return this._Merchandises;
			}
			set
			{
				this._Merchandises.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUsers_Orders", Storage="_Orders", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<Orders> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ratings(Ratings entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUsers = this;
		}
		
		private void detach_Ratings(Ratings entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUsers = null;
		}
		
		private void attach_Merchandises(Merchandises entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUsers = this;
		}
		
		private void detach_Merchandises(Merchandises entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUsers = null;
		}
		
		private void attach_Orders(Orders entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUsers = this;
		}
		
		private void detach_Orders(Orders entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUsers = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UnitsProducts")]
	public partial class UnitsProducts : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _ShortName;
		
		private int _Value;
		
		private EntitySet<Products> _Products;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    #endregion
		
		public UnitsProducts()
		{
			this._Products = new EntitySet<Products>(new Action<Products>(this.attach_Products), new Action<Products>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitsProducts_Products", Storage="_Products", ThisKey="Id", OtherKey="UnitsId")]
		public EntitySet<Products> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Products entity)
		{
			this.SendPropertyChanging();
			entity.UnitsProducts = this;
		}
		
		private void detach_Products(Products entity)
		{
			this.SendPropertyChanging();
			entity.UnitsProducts = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MerchandiseStates")]
	public partial class MerchandiseStates : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MerchandiseId;
		
		private int _StateId;
		
		private EntityRef<States> _States;
		
		private EntityRef<Merchandises> _Merchandises;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMerchandiseIdChanging(int value);
    partial void OnMerchandiseIdChanged();
    partial void OnStateIdChanging(int value);
    partial void OnStateIdChanged();
    #endregion
		
		public MerchandiseStates()
		{
			this._States = default(EntityRef<States>);
			this._Merchandises = default(EntityRef<Merchandises>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MerchandiseId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MerchandiseId
		{
			get
			{
				return this._MerchandiseId;
			}
			set
			{
				if ((this._MerchandiseId != value))
				{
					if (this._Merchandises.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMerchandiseIdChanging(value);
					this.SendPropertyChanging();
					this._MerchandiseId = value;
					this.SendPropertyChanged("MerchandiseId");
					this.OnMerchandiseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					if (this._States.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="States_MerchandiseStates", Storage="_States", ThisKey="StateId", OtherKey="Id", IsForeignKey=true)]
		public States States
		{
			get
			{
				return this._States.Entity;
			}
			set
			{
				States previousValue = this._States.Entity;
				if (((previousValue != value) 
							|| (this._States.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._States.Entity = null;
						previousValue.MerchandiseStates.Remove(this);
					}
					this._States.Entity = value;
					if ((value != null))
					{
						value.MerchandiseStates.Add(this);
						this._StateId = value.Id;
					}
					else
					{
						this._StateId = default(int);
					}
					this.SendPropertyChanged("States");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Merchandises_MerchandiseStates", Storage="_Merchandises", ThisKey="MerchandiseId", OtherKey="Id", IsForeignKey=true)]
		public Merchandises Merchandises
		{
			get
			{
				return this._Merchandises.Entity;
			}
			set
			{
				Merchandises previousValue = this._Merchandises.Entity;
				if (((previousValue != value) 
							|| (this._Merchandises.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Merchandises.Entity = null;
						previousValue.MerchandiseStates.Remove(this);
					}
					this._Merchandises.Entity = value;
					if ((value != null))
					{
						value.MerchandiseStates.Add(this);
						this._MerchandiseId = value.Id;
					}
					else
					{
						this._MerchandiseId = default(int);
					}
					this.SendPropertyChanged("Merchandises");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrdersStates")]
	public partial class OrdersStates : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderId;
		
		private int _StateId;
		
		private EntityRef<States> _States;
		
		private EntityRef<Orders> _Orders;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIdChanging(int value);
    partial void OnOrderIdChanged();
    partial void OnStateIdChanging(int value);
    partial void OnStateIdChanged();
    #endregion
		
		public OrdersStates()
		{
			this._States = default(EntityRef<States>);
			this._Orders = default(EntityRef<Orders>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					if (this._Orders.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					if (this._States.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="States_OrdersStates", Storage="_States", ThisKey="StateId", OtherKey="Id", IsForeignKey=true)]
		public States States
		{
			get
			{
				return this._States.Entity;
			}
			set
			{
				States previousValue = this._States.Entity;
				if (((previousValue != value) 
							|| (this._States.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._States.Entity = null;
						previousValue.OrdersStates.Remove(this);
					}
					this._States.Entity = value;
					if ((value != null))
					{
						value.OrdersStates.Add(this);
						this._StateId = value.Id;
					}
					else
					{
						this._StateId = default(int);
					}
					this.SendPropertyChanged("States");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Orders_OrdersStates", Storage="_Orders", ThisKey="OrderId", OtherKey="Id", IsForeignKey=true)]
		public Orders Orders
		{
			get
			{
				return this._Orders.Entity;
			}
			set
			{
				Orders previousValue = this._Orders.Entity;
				if (((previousValue != value) 
							|| (this._Orders.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Orders.Entity = null;
						previousValue.OrdersStates.Remove(this);
					}
					this._Orders.Entity = value;
					if ((value != null))
					{
						value.OrdersStates.Add(this);
						this._OrderId = value.Id;
					}
					else
					{
						this._OrderId = default(int);
					}
					this.SendPropertyChanged("Orders");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Products")]
	public partial class Products : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private int _Price;
		
		private int _TypeProductId;
		
		private int _UnitsId;
		
		private EntitySet<ProductStates> _ProductStates;
		
		private EntitySet<MerchandiseProducts> _MerchandiseProducts;
		
		private EntityRef<UnitsProducts> _UnitsProducts;
		
		private EntityRef<TypeProducts> _TypeProducts;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnTypeProductIdChanging(int value);
    partial void OnTypeProductIdChanged();
    partial void OnUnitsIdChanging(int value);
    partial void OnUnitsIdChanged();
    #endregion
		
		public Products()
		{
			this._ProductStates = new EntitySet<ProductStates>(new Action<ProductStates>(this.attach_ProductStates), new Action<ProductStates>(this.detach_ProductStates));
			this._MerchandiseProducts = new EntitySet<MerchandiseProducts>(new Action<MerchandiseProducts>(this.attach_MerchandiseProducts), new Action<MerchandiseProducts>(this.detach_MerchandiseProducts));
			this._UnitsProducts = default(EntityRef<UnitsProducts>);
			this._TypeProducts = default(EntityRef<TypeProducts>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(1024)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeProductId", DbType="Int NOT NULL")]
		public int TypeProductId
		{
			get
			{
				return this._TypeProductId;
			}
			set
			{
				if ((this._TypeProductId != value))
				{
					if (this._TypeProducts.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeProductIdChanging(value);
					this.SendPropertyChanging();
					this._TypeProductId = value;
					this.SendPropertyChanged("TypeProductId");
					this.OnTypeProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitsId", DbType="Int NOT NULL")]
		public int UnitsId
		{
			get
			{
				return this._UnitsId;
			}
			set
			{
				if ((this._UnitsId != value))
				{
					if (this._UnitsProducts.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitsIdChanging(value);
					this.SendPropertyChanging();
					this._UnitsId = value;
					this.SendPropertyChanged("UnitsId");
					this.OnUnitsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Products_ProductStates", Storage="_ProductStates", ThisKey="Id", OtherKey="ProductId")]
		public EntitySet<ProductStates> ProductStates
		{
			get
			{
				return this._ProductStates;
			}
			set
			{
				this._ProductStates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Products_MerchandiseProducts", Storage="_MerchandiseProducts", ThisKey="Id", OtherKey="ProductId")]
		public EntitySet<MerchandiseProducts> MerchandiseProducts
		{
			get
			{
				return this._MerchandiseProducts;
			}
			set
			{
				this._MerchandiseProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitsProducts_Products", Storage="_UnitsProducts", ThisKey="UnitsId", OtherKey="Id", IsForeignKey=true)]
		public UnitsProducts UnitsProducts
		{
			get
			{
				return this._UnitsProducts.Entity;
			}
			set
			{
				UnitsProducts previousValue = this._UnitsProducts.Entity;
				if (((previousValue != value) 
							|| (this._UnitsProducts.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitsProducts.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._UnitsProducts.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._UnitsId = value.Id;
					}
					else
					{
						this._UnitsId = default(int);
					}
					this.SendPropertyChanged("UnitsProducts");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeProducts_Products", Storage="_TypeProducts", ThisKey="TypeProductId", OtherKey="Id", IsForeignKey=true)]
		public TypeProducts TypeProducts
		{
			get
			{
				return this._TypeProducts.Entity;
			}
			set
			{
				TypeProducts previousValue = this._TypeProducts.Entity;
				if (((previousValue != value) 
							|| (this._TypeProducts.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeProducts.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._TypeProducts.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._TypeProductId = value.Id;
					}
					else
					{
						this._TypeProductId = default(int);
					}
					this.SendPropertyChanged("TypeProducts");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductStates(ProductStates entity)
		{
			this.SendPropertyChanging();
			entity.Products = this;
		}
		
		private void detach_ProductStates(ProductStates entity)
		{
			this.SendPropertyChanging();
			entity.Products = null;
		}
		
		private void attach_MerchandiseProducts(MerchandiseProducts entity)
		{
			this.SendPropertyChanging();
			entity.Products = this;
		}
		
		private void detach_MerchandiseProducts(MerchandiseProducts entity)
		{
			this.SendPropertyChanging();
			entity.Products = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductStates")]
	public partial class ProductStates : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private int _StateId;
		
		private EntityRef<Products> _Products;
		
		private EntityRef<States> _States;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnStateIdChanging(int value);
    partial void OnStateIdChanged();
    #endregion
		
		public ProductStates()
		{
			this._Products = default(EntityRef<Products>);
			this._States = default(EntityRef<States>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Products.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					if (this._States.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Products_ProductStates", Storage="_Products", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
		public Products Products
		{
			get
			{
				return this._Products.Entity;
			}
			set
			{
				Products previousValue = this._Products.Entity;
				if (((previousValue != value) 
							|| (this._Products.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Products.Entity = null;
						previousValue.ProductStates.Remove(this);
					}
					this._Products.Entity = value;
					if ((value != null))
					{
						value.ProductStates.Add(this);
						this._ProductId = value.Id;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Products");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="States_ProductStates", Storage="_States", ThisKey="StateId", OtherKey="Id", IsForeignKey=true)]
		public States States
		{
			get
			{
				return this._States.Entity;
			}
			set
			{
				States previousValue = this._States.Entity;
				if (((previousValue != value) 
							|| (this._States.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._States.Entity = null;
						previousValue.ProductStates.Remove(this);
					}
					this._States.Entity = value;
					if ((value != null))
					{
						value.ProductStates.Add(this);
						this._StateId = value.Id;
					}
					else
					{
						this._StateId = default(int);
					}
					this.SendPropertyChanged("States");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ratings")]
	public partial class Ratings : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Value;
		
		private string _Comment;
		
		private string _UserId;
		
		private int _MerchandiseId;
		
		private EntitySet<RatingStates> _RatingStates;
		
		private EntityRef<AspNetUsers> _AspNetUsers;
		
		private EntityRef<Merchandises> _Merchandises;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnMerchandiseIdChanging(int value);
    partial void OnMerchandiseIdChanged();
    #endregion
		
		public Ratings()
		{
			this._RatingStates = new EntitySet<RatingStates>(new Action<RatingStates>(this.attach_RatingStates), new Action<RatingStates>(this.detach_RatingStates));
			this._AspNetUsers = default(EntityRef<AspNetUsers>);
			this._Merchandises = default(EntityRef<Merchandises>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(1028)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUsers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MerchandiseId", DbType="Int NOT NULL")]
		public int MerchandiseId
		{
			get
			{
				return this._MerchandiseId;
			}
			set
			{
				if ((this._MerchandiseId != value))
				{
					if (this._Merchandises.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMerchandiseIdChanging(value);
					this.SendPropertyChanging();
					this._MerchandiseId = value;
					this.SendPropertyChanged("MerchandiseId");
					this.OnMerchandiseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ratings_RatingStates", Storage="_RatingStates", ThisKey="Id", OtherKey="RatingId")]
		public EntitySet<RatingStates> RatingStates
		{
			get
			{
				return this._RatingStates;
			}
			set
			{
				this._RatingStates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUsers_Ratings", Storage="_AspNetUsers", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public AspNetUsers AspNetUsers
		{
			get
			{
				return this._AspNetUsers.Entity;
			}
			set
			{
				AspNetUsers previousValue = this._AspNetUsers.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUsers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUsers.Entity = null;
						previousValue.Ratings.Remove(this);
					}
					this._AspNetUsers.Entity = value;
					if ((value != null))
					{
						value.Ratings.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUsers");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Merchandises_Ratings", Storage="_Merchandises", ThisKey="MerchandiseId", OtherKey="Id", IsForeignKey=true)]
		public Merchandises Merchandises
		{
			get
			{
				return this._Merchandises.Entity;
			}
			set
			{
				Merchandises previousValue = this._Merchandises.Entity;
				if (((previousValue != value) 
							|| (this._Merchandises.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Merchandises.Entity = null;
						previousValue.Ratings.Remove(this);
					}
					this._Merchandises.Entity = value;
					if ((value != null))
					{
						value.Ratings.Add(this);
						this._MerchandiseId = value.Id;
					}
					else
					{
						this._MerchandiseId = default(int);
					}
					this.SendPropertyChanged("Merchandises");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RatingStates(RatingStates entity)
		{
			this.SendPropertyChanging();
			entity.Ratings = this;
		}
		
		private void detach_RatingStates(RatingStates entity)
		{
			this.SendPropertyChanging();
			entity.Ratings = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RatingStates")]
	public partial class RatingStates : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RatingId;
		
		private int _StateId;
		
		private EntityRef<Ratings> _Ratings;
		
		private EntityRef<States> _States;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRatingIdChanging(int value);
    partial void OnRatingIdChanged();
    partial void OnStateIdChanging(int value);
    partial void OnStateIdChanged();
    #endregion
		
		public RatingStates()
		{
			this._Ratings = default(EntityRef<Ratings>);
			this._States = default(EntityRef<States>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RatingId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RatingId
		{
			get
			{
				return this._RatingId;
			}
			set
			{
				if ((this._RatingId != value))
				{
					if (this._Ratings.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRatingIdChanging(value);
					this.SendPropertyChanging();
					this._RatingId = value;
					this.SendPropertyChanged("RatingId");
					this.OnRatingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					if (this._States.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ratings_RatingStates", Storage="_Ratings", ThisKey="RatingId", OtherKey="Id", IsForeignKey=true)]
		public Ratings Ratings
		{
			get
			{
				return this._Ratings.Entity;
			}
			set
			{
				Ratings previousValue = this._Ratings.Entity;
				if (((previousValue != value) 
							|| (this._Ratings.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ratings.Entity = null;
						previousValue.RatingStates.Remove(this);
					}
					this._Ratings.Entity = value;
					if ((value != null))
					{
						value.RatingStates.Add(this);
						this._RatingId = value.Id;
					}
					else
					{
						this._RatingId = default(int);
					}
					this.SendPropertyChanged("Ratings");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="States_RatingStates", Storage="_States", ThisKey="StateId", OtherKey="Id", IsForeignKey=true)]
		public States States
		{
			get
			{
				return this._States.Entity;
			}
			set
			{
				States previousValue = this._States.Entity;
				if (((previousValue != value) 
							|| (this._States.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._States.Entity = null;
						previousValue.RatingStates.Remove(this);
					}
					this._States.Entity = value;
					if ((value != null))
					{
						value.RatingStates.Add(this);
						this._StateId = value.Id;
					}
					else
					{
						this._StateId = default(int);
					}
					this.SendPropertyChanged("States");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.States")]
	public partial class States : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<MerchandiseStates> _MerchandiseStates;
		
		private EntitySet<OrdersStates> _OrdersStates;
		
		private EntitySet<ProductStates> _ProductStates;
		
		private EntitySet<RatingStates> _RatingStates;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public States()
		{
			this._MerchandiseStates = new EntitySet<MerchandiseStates>(new Action<MerchandiseStates>(this.attach_MerchandiseStates), new Action<MerchandiseStates>(this.detach_MerchandiseStates));
			this._OrdersStates = new EntitySet<OrdersStates>(new Action<OrdersStates>(this.attach_OrdersStates), new Action<OrdersStates>(this.detach_OrdersStates));
			this._ProductStates = new EntitySet<ProductStates>(new Action<ProductStates>(this.attach_ProductStates), new Action<ProductStates>(this.detach_ProductStates));
			this._RatingStates = new EntitySet<RatingStates>(new Action<RatingStates>(this.attach_RatingStates), new Action<RatingStates>(this.detach_RatingStates));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="States_MerchandiseStates", Storage="_MerchandiseStates", ThisKey="Id", OtherKey="StateId")]
		public EntitySet<MerchandiseStates> MerchandiseStates
		{
			get
			{
				return this._MerchandiseStates;
			}
			set
			{
				this._MerchandiseStates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="States_OrdersStates", Storage="_OrdersStates", ThisKey="Id", OtherKey="StateId")]
		public EntitySet<OrdersStates> OrdersStates
		{
			get
			{
				return this._OrdersStates;
			}
			set
			{
				this._OrdersStates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="States_ProductStates", Storage="_ProductStates", ThisKey="Id", OtherKey="StateId")]
		public EntitySet<ProductStates> ProductStates
		{
			get
			{
				return this._ProductStates;
			}
			set
			{
				this._ProductStates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="States_RatingStates", Storage="_RatingStates", ThisKey="Id", OtherKey="StateId")]
		public EntitySet<RatingStates> RatingStates
		{
			get
			{
				return this._RatingStates;
			}
			set
			{
				this._RatingStates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MerchandiseStates(MerchandiseStates entity)
		{
			this.SendPropertyChanging();
			entity.States = this;
		}
		
		private void detach_MerchandiseStates(MerchandiseStates entity)
		{
			this.SendPropertyChanging();
			entity.States = null;
		}
		
		private void attach_OrdersStates(OrdersStates entity)
		{
			this.SendPropertyChanging();
			entity.States = this;
		}
		
		private void detach_OrdersStates(OrdersStates entity)
		{
			this.SendPropertyChanging();
			entity.States = null;
		}
		
		private void attach_ProductStates(ProductStates entity)
		{
			this.SendPropertyChanging();
			entity.States = this;
		}
		
		private void detach_ProductStates(ProductStates entity)
		{
			this.SendPropertyChanging();
			entity.States = null;
		}
		
		private void attach_RatingStates(RatingStates entity)
		{
			this.SendPropertyChanging();
			entity.States = this;
		}
		
		private void detach_RatingStates(RatingStates entity)
		{
			this.SendPropertyChanging();
			entity.States = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypeProducts")]
	public partial class TypeProducts : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Products> _Products;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public TypeProducts()
		{
			this._Products = new EntitySet<Products>(new Action<Products>(this.attach_Products), new Action<Products>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(1024)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeProducts_Products", Storage="_Products", ThisKey="Id", OtherKey="TypeProductId")]
		public EntitySet<Products> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Products entity)
		{
			this.SendPropertyChanging();
			entity.TypeProducts = this;
		}
		
		private void detach_Products(Products entity)
		{
			this.SendPropertyChanging();
			entity.TypeProducts = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MerchandiseProducts")]
	public partial class MerchandiseProducts : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MerchandiseId;
		
		private int _ProductId;
		
		private int _CountProduct;
		
		private EntityRef<Products> _Products;
		
		private EntityRef<Merchandises> _Merchandises;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMerchandiseIdChanging(int value);
    partial void OnMerchandiseIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnCountProductChanging(int value);
    partial void OnCountProductChanged();
    #endregion
		
		public MerchandiseProducts()
		{
			this._Products = default(EntityRef<Products>);
			this._Merchandises = default(EntityRef<Merchandises>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MerchandiseId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MerchandiseId
		{
			get
			{
				return this._MerchandiseId;
			}
			set
			{
				if ((this._MerchandiseId != value))
				{
					if (this._Merchandises.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMerchandiseIdChanging(value);
					this.SendPropertyChanging();
					this._MerchandiseId = value;
					this.SendPropertyChanged("MerchandiseId");
					this.OnMerchandiseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Products.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountProduct", DbType="Int NOT NULL")]
		public int CountProduct
		{
			get
			{
				return this._CountProduct;
			}
			set
			{
				if ((this._CountProduct != value))
				{
					this.OnCountProductChanging(value);
					this.SendPropertyChanging();
					this._CountProduct = value;
					this.SendPropertyChanged("CountProduct");
					this.OnCountProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Products_MerchandiseProducts", Storage="_Products", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
		public Products Products
		{
			get
			{
				return this._Products.Entity;
			}
			set
			{
				Products previousValue = this._Products.Entity;
				if (((previousValue != value) 
							|| (this._Products.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Products.Entity = null;
						previousValue.MerchandiseProducts.Remove(this);
					}
					this._Products.Entity = value;
					if ((value != null))
					{
						value.MerchandiseProducts.Add(this);
						this._ProductId = value.Id;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Products");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Merchandises_MerchandiseProducts", Storage="_Merchandises", ThisKey="MerchandiseId", OtherKey="Id", IsForeignKey=true)]
		public Merchandises Merchandises
		{
			get
			{
				return this._Merchandises.Entity;
			}
			set
			{
				Merchandises previousValue = this._Merchandises.Entity;
				if (((previousValue != value) 
							|| (this._Merchandises.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Merchandises.Entity = null;
						previousValue.MerchandiseProducts.Remove(this);
					}
					this._Merchandises.Entity = value;
					if ((value != null))
					{
						value.MerchandiseProducts.Add(this);
						this._MerchandiseId = value.Id;
					}
					else
					{
						this._MerchandiseId = default(int);
					}
					this.SendPropertyChanged("Merchandises");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Merchandises")]
	public partial class Merchandises : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private string _UserId;
		
		private EntitySet<MerchandiseStates> _MerchandiseStates;
		
		private EntitySet<Ratings> _Ratings;
		
		private EntitySet<MerchandiseProducts> _MerchandiseProducts;
		
		private EntitySet<Orders> _Orders;
		
		private EntityRef<AspNetUsers> _AspNetUsers;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    #endregion
		
		public Merchandises()
		{
			this._MerchandiseStates = new EntitySet<MerchandiseStates>(new Action<MerchandiseStates>(this.attach_MerchandiseStates), new Action<MerchandiseStates>(this.detach_MerchandiseStates));
			this._Ratings = new EntitySet<Ratings>(new Action<Ratings>(this.attach_Ratings), new Action<Ratings>(this.detach_Ratings));
			this._MerchandiseProducts = new EntitySet<MerchandiseProducts>(new Action<MerchandiseProducts>(this.attach_MerchandiseProducts), new Action<MerchandiseProducts>(this.detach_MerchandiseProducts));
			this._Orders = new EntitySet<Orders>(new Action<Orders>(this.attach_Orders), new Action<Orders>(this.detach_Orders));
			this._AspNetUsers = default(EntityRef<AspNetUsers>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(2048)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128)")]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUsers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Merchandises_MerchandiseStates", Storage="_MerchandiseStates", ThisKey="Id", OtherKey="MerchandiseId")]
		public EntitySet<MerchandiseStates> MerchandiseStates
		{
			get
			{
				return this._MerchandiseStates;
			}
			set
			{
				this._MerchandiseStates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Merchandises_Ratings", Storage="_Ratings", ThisKey="Id", OtherKey="MerchandiseId")]
		public EntitySet<Ratings> Ratings
		{
			get
			{
				return this._Ratings;
			}
			set
			{
				this._Ratings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Merchandises_MerchandiseProducts", Storage="_MerchandiseProducts", ThisKey="Id", OtherKey="MerchandiseId")]
		public EntitySet<MerchandiseProducts> MerchandiseProducts
		{
			get
			{
				return this._MerchandiseProducts;
			}
			set
			{
				this._MerchandiseProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Merchandises_Orders", Storage="_Orders", ThisKey="Id", OtherKey="MerchandaseId")]
		public EntitySet<Orders> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUsers_Merchandises", Storage="_AspNetUsers", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public AspNetUsers AspNetUsers
		{
			get
			{
				return this._AspNetUsers.Entity;
			}
			set
			{
				AspNetUsers previousValue = this._AspNetUsers.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUsers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUsers.Entity = null;
						previousValue.Merchandises.Remove(this);
					}
					this._AspNetUsers.Entity = value;
					if ((value != null))
					{
						value.Merchandises.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUsers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MerchandiseStates(MerchandiseStates entity)
		{
			this.SendPropertyChanging();
			entity.Merchandises = this;
		}
		
		private void detach_MerchandiseStates(MerchandiseStates entity)
		{
			this.SendPropertyChanging();
			entity.Merchandises = null;
		}
		
		private void attach_Ratings(Ratings entity)
		{
			this.SendPropertyChanging();
			entity.Merchandises = this;
		}
		
		private void detach_Ratings(Ratings entity)
		{
			this.SendPropertyChanging();
			entity.Merchandises = null;
		}
		
		private void attach_MerchandiseProducts(MerchandiseProducts entity)
		{
			this.SendPropertyChanging();
			entity.Merchandises = this;
		}
		
		private void detach_MerchandiseProducts(MerchandiseProducts entity)
		{
			this.SendPropertyChanging();
			entity.Merchandises = null;
		}
		
		private void attach_Orders(Orders entity)
		{
			this.SendPropertyChanging();
			entity.Merchandises = this;
		}
		
		private void detach_Orders(Orders entity)
		{
			this.SendPropertyChanging();
			entity.Merchandises = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Orders")]
	public partial class Orders : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _Date;
		
		private int _Count;
		
		private string _UserId;
		
		private int _MerchandaseId;
		
		private EntitySet<OrdersStates> _OrdersStates;
		
		private EntityRef<AspNetUsers> _AspNetUsers;
		
		private EntityRef<Merchandises> _Merchandises;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnCountChanging(int value);
    partial void OnCountChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnMerchandaseIdChanging(int value);
    partial void OnMerchandaseIdChanged();
    #endregion
		
		public Orders()
		{
			this._OrdersStates = new EntitySet<OrdersStates>(new Action<OrdersStates>(this.attach_OrdersStates), new Action<OrdersStates>(this.detach_OrdersStates));
			this._AspNetUsers = default(EntityRef<AspNetUsers>);
			this._Merchandises = default(EntityRef<Merchandises>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Count", DbType="Int NOT NULL")]
		public int Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUsers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MerchandaseId", DbType="Int NOT NULL")]
		public int MerchandaseId
		{
			get
			{
				return this._MerchandaseId;
			}
			set
			{
				if ((this._MerchandaseId != value))
				{
					if (this._Merchandises.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMerchandaseIdChanging(value);
					this.SendPropertyChanging();
					this._MerchandaseId = value;
					this.SendPropertyChanged("MerchandaseId");
					this.OnMerchandaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Orders_OrdersStates", Storage="_OrdersStates", ThisKey="Id", OtherKey="OrderId")]
		public EntitySet<OrdersStates> OrdersStates
		{
			get
			{
				return this._OrdersStates;
			}
			set
			{
				this._OrdersStates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUsers_Orders", Storage="_AspNetUsers", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public AspNetUsers AspNetUsers
		{
			get
			{
				return this._AspNetUsers.Entity;
			}
			set
			{
				AspNetUsers previousValue = this._AspNetUsers.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUsers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUsers.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._AspNetUsers.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUsers");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Merchandises_Orders", Storage="_Merchandises", ThisKey="MerchandaseId", OtherKey="Id", IsForeignKey=true)]
		public Merchandises Merchandises
		{
			get
			{
				return this._Merchandises.Entity;
			}
			set
			{
				Merchandises previousValue = this._Merchandises.Entity;
				if (((previousValue != value) 
							|| (this._Merchandises.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Merchandises.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Merchandises.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._MerchandaseId = value.Id;
					}
					else
					{
						this._MerchandaseId = default(int);
					}
					this.SendPropertyChanged("Merchandises");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrdersStates(OrdersStates entity)
		{
			this.SendPropertyChanging();
			entity.Orders = this;
		}
		
		private void detach_OrdersStates(OrdersStates entity)
		{
			this.SendPropertyChanging();
			entity.Orders = null;
		}
	}
}
#pragma warning restore 1591
